@startuml Players Play a WoJ Game

participant Client1
participant Client2
Client1 -> Server: connect(svrIP, svrPort)
Client1 <- Server: send("PlayerID", ID)
Client2 -> Server: connect(svrIP, svrPort)
Client2 -> Server: send("PlayerID", ID)


Server -> ExecutiveLogic : startGame([playerID])
loop 2 rounds
    ExecutiveLogic -> ExecutiveLogic: incrementRound()

    == START ROUND ==
    loop number of spins < 50 and board is not empty
        == START TURN ==
        Server <- ExecutiveLogic : whoseTurn()

        group Prompt Player to Spin
            Client1 <- Server: send("pleaseSpin", playerID)

            alt Player responds

                Client1 -> Server: send("Spin Wheel")
                Server -> ExecutiveLogic: spinRequest()

            else No player response
                Server -> ExecutiveLogic: timeout()
                ExecutiveLogic -> ExecutiveLogic: nextPlayer()

            end
        end

        ExecutiveLogic -> GameBoard : getAvailableCategories()
        ExecutiveLogic -> Wheel : updateCategories()
        ExecutiveLogic -> Wheel : getSpinResult()
        ExecutiveLogic -> ExecutiveLogic : incrementSpinCounter()


        Server <- ExecutiveLogic: notifySpinResult(playerID, spinResult, spinsRemain)
        Client1 <- Server: send("spinDisplay", spinResult, spinsRemain)
        Client2 <- Server: send("spinupdateDisplay", spinResult, spinsRemain)

        alt Player's or Opponent's Choice
            Server <- ExecutiveLogic: selectCategory(playerID, categories)
            Client1 <- Server: send("selectCategory", [categories])
            Client1 -> Server: send("Category", category)

            loop Player Answers Questions until category is empty
                ExecutiveLogic -> GameBoard: getTile(round, category)

                Client1 <- Server: send("Question", question, answers)

                alt Player responds

                    Client1 -> Server: send("AnswerChoice", playerAns)

                    ExecutiveLogic -> GameBoard : checkAnswer(playerAns, tile)
                    ExecutiveLogic -> ScoreKeeper : updateScore(playerID, playerCorrect, points)
                    
                    alt Player answers correctly
                        ExecutiveLogic -> GameBoard: isCategoryAvailable(category)
                    else Incorrect answer
                        ExecutiveLogic -> ScoreKeeper : hasToken(playerID)
                        alt Player has 1+ has token
                            group Prompt Player to use token
                                Server <- ExecutiveLogic: askUseToken(playerID)

                                Client1 <- Server: send(playerID, "useToken?")

                                alt Player responds YES

                                    Client1 -> Server: send("useToken")
                                    Server -> ExecutiveLogic: useToken()
                                    ExecutiveLogic -> ScoreKeeper: useToken()
                                else Player responds NO
                                    Client1 -> Server: send("NOTuseToken")
                                    Server -> ExecutiveLogic: NOTuseToken()
                                    ExecutiveLogic -> ExecutiveLogic: nextPlayer()
                                else No player response
                                    Server -> ExecutiveLogic: timeout()
                                    ExecutiveLogic -> ExecutiveLogic: nextPlayer()

                                end
                            end
                        else Player has 0 tokens
                            ExecutiveLogic -> ExecutiveLogic: nextPlayer()
                        break
                        end


                        end
                    end

                else No player response
                    Server -> ExecutiveLogic: timeout()
                    ExecutiveLogic -> ExecutiveLogic: nextPlayer()
                    break
                    end
                end
            end
        
        
        else  Free Spin
                ExecutiveLogic -> ScoreKeeper: addToken(playerID)

        else Spin again
            ExecutiveLogic -> Wheel: getSpinResult()
        else Bankrupt
            ExecutiveLogic -> ScoreKeeper: bankrupt(playerID)
            ExecutiveLogic -> ExecutiveLogic: nextPlayer()
        else Lose Turn
            ExecutiveLogic -> ExecutiveLogic: nextPlayer()
        end
    
    end
end
    == END GAME ==

    ExecutiveLogic -> ScoreKeeper: determineWinner()
    ExecutiveLogic -> Server: endGame(winner)

    Client1 <- Server: send("GAMEOVER", playerID)
    Client2 <- Server: send("GAMEOVER", playerID)


@enduml