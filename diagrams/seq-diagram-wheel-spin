@startuml Respond to Wheel Spin
title Respond to Wheel Spin

skinparam sequenceReferenceBackgroundColor palegreen
skinparam sequenceReferenceHeaderBackgroundColor  mediumseagreen

participant Client1 #Plum
participant Client2 #Plum

box "Game Server" #LightSteelBlue
participant MessageServer as Server
participant ExecutiveLogic
participant GameBoard
participant ScoreKeeper
participant Wheel
end box

Server <- ExecutiveLogic: spinResult(playerID, spinResult, spinsRemain)
Client1 <- Server: send("spinupdateDisplay", spinResult, spinsRemain)
Client2 <- Server: send("spinupdateDisplay", spinResult, spinsRemain)
ref#Magenta over Client1, ExecutiveLogic
        Send Updated Scoreboard to Clients
end ref

ExecutiveLogic -> GameBoard : getAvailableCategories(round)
ExecutiveLogic <-- GameBoard : [availableCategory]

alt#MediumTurquoise "Player's Choice" or "Opponent's Choice"
    Server <- ExecutiveLogic: selectCategory(playerID, availableCategory)
    note right
    Executive Logic selects the 
    appropriate player to choose
    the category from list of
     available categories
    end note
    
    Client1 <- Server: send("selectCategory", [availableCategory])
    Client1 --> Server: send("Category", category)
    Server --> ExecutiveLogic: selectedCategory(category)

    loop#Gold until category is empty
            ref over Client1, ScoreKeeper
            Player Answers Question
        end ref
    end

else Sector result is an available category
    loop#Gold until category is empty
        ref over Client1, ScoreKeeper
            Player Answers Question
        end ref
    end

else Sector result category is NOT available or is "Spin again"
    ExecutiveLogic -> Wheel: getSpinResult()
    ExecutiveLogic <-- Wheel : sector

    ref#Cyan over Client1, ExecutiveLogic
            Send Spin Result to Clients
    end ref

else "Free Spin"
    ExecutiveLogic -> ScoreKeeper: addToken(playerID)
    ExecutiveLogic <-- ScoreKeeper: tokens
    ref#Magenta over Client1, ExecutiveLogic
        Send Updated Scoreboard to Clients
    end ref



else "Bankrupt"
    ExecutiveLogic -> ScoreKeeper: bankrupt(playerID)
    ExecutiveLogic <-- ScoreKeeper: scores

    ref#Magenta over Client1, ExecutiveLogic
        Send Updated Scoreboard to Clients
    end ref

    ExecutiveLogic -> ExecutiveLogic: nextPlayer()
else Lose Turn
    ExecutiveLogic -> ExecutiveLogic: nextPlayer()
end
    

@enduml
