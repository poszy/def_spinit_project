@startuml  Prompt Player to Answer Question
title  Prompt Player to Answer Question
skinparam sequenceReferenceBackgroundColor palegreen
skinparam sequenceReferenceHeaderBackgroundColor  mediumseagreen

actor ActivePlayer as Player1 #Orange 

boundary    UI1

participant Client1 #Plum

box "Game Server" #LightSteelBlue
participant MessageServer as Server
participant ExecutiveLogic
participant GameBoard
participant ScoreKeeper
end box


ExecutiveLogic -> GameBoard: getTile(round, category)
ExecutiveLogic <-- GameBoard: Tile

Server <- ExecutiveLogic: askQuestion(question, [ansChoice])

Client1 <- Server: send("Question", question, [ansChoice])
UI1 <- Client1: displayQuestion(question, [ansChoice])

    alt#MediumTurquoise Player responds

    Player1 -> UI1: selects answer
        UI1 -> Client1: userInput(playerAns)
        Client1 -> Server: send("AnswerChoice", playerAns)
        Server -> ExecutiveLogic: playerAns(plyerAns)


        ExecutiveLogic -> GameBoard : checkAnswer(playerAns, tile)
        ExecutiveLogic <-- GameBoard : playerCorrect: boolean
        ExecutiveLogic -> ScoreKeeper : updateScore(playerID, playerCorrect, points)
        ExecutiveLogic <-- ScoreKeeper: scores
        
        ref#Magenta over UI1, ExecutiveLogic
            Send Updated Scoreboard to Players
        end ref

        alt#MediumTurquoise Player answers correctly
            ExecutiveLogic -> GameBoard: isCategoryAvailable(category)
            ExecutiveLogic <-- GameBoard: boolean

        else Player answers incorrectly
            ExecutiveLogic -> ScoreKeeper : hasToken(playerID)
            ExecutiveLogic  <-- ScoreKeeper : boolean

            alt#MediumTurquoise Player has 1+ has token
                ref over Player1, ExecutiveLogic #PaleGreen
                    Prompt Player to use token 
                end ref
            else Player has 0 tokens
                ExecutiveLogic -> ExecutiveLogic: nextPlayer()
            break
            end


            end
        end

    else No player response
        Server --> ExecutiveLogic: timeout()
        ExecutiveLogic -> ExecutiveLogic: nextPlayer()
        break
        end
    end

@enduml